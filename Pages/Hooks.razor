@page "/hooks"
@using System.Text.RegularExpressions
@using AscendedHookHelper.Data
@using AscendedHookHelper.Data.Headers
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<PageTitle>Counter</PageTitle>

<h1>Hooks</h1>

<p>ASA API Hooks Helper Tool</p>

@if (_headerDataList?.Count < ReferenceData.ArkHeaderNamesList.Count)
{
    <p>
        <em>Loading...</em>
    </p>
    @if (_lastStartedLoadingHeadersTime.HasValue && (DateTime.UtcNow - _lastStartedLoadingHeadersTime.Value).TotalSeconds >= LoadingHeadersTimeoutSeconds)
    {
        <p>Headers cache updating timed out after @LoadingHeadersTimeoutSeconds seconds. Please refresh the page.</p>
    }
}
else
{
    <p>Loaded in @_lastLoadCompletionDurationSeconds seconds!</p>
    <br/>
    
    <input type="text" @bind="_searchInputValue" @bind:event="oninput" />
    
    <ul>
        @if (FilteredSearchHeaderResults != null)
        {
            foreach (HeaderData headerData in FilteredSearchHeaderResults)
            {
                <li>@headerData.HeaderName</li>
            }
        }
    </ul>
    @* @foreach (HeaderData headerData in _headerDataList) *@
    @* { *@
    @*     <p> ___ @headerData.HeaderName ___</p> *@
    @*     $1$ @foreach (HeaderStructData structData in headerData.StructsList) #1# *@
    @*     $1$ { #1# *@
    @*     $1$     <p>-=[@structData.StructName]=-</p> #1# *@
    @*     $1$     <br/> #1# *@
    @*     $1$ } #1# *@
    @*     $1$ <p>==============================</p> #1# *@
    @* } *@
}


@code {
    private int LoadingHeadersTimeoutSeconds { get; set; } = 45;
    
    const string StructFullContentsRegexPattern = @"struct .*?{\n.*?\n*?\n};";
    const string StructNameRegexPattern = @"(?<=struct ).*?(?= ?{|\n| ?;)";
    const string StructFunctionsFullContentRegexPattern = @"(?<=// Functions\n\n).*(}$|(?=\n\n))";
    const string FunctionLinesRegexPattern = @".*?}(?=\n|$)";
    const string FunctionLineNameRegexPattern = @"(?<= )[a-zA-Z]*";

    private float _lastLoadCompletionDurationSeconds = 0f;

    private string? _searchInputValue = null;

    private DateTime? _lastStartedLoadingHeadersTime = null;
    private DateTime? _lastHeadersCachedTime = null;
    private readonly List<HeaderData>? _headerDataListRaw = new List<HeaderData>();
    private readonly Dictionary<string, HeaderData>? _headerDatasRegistry = new Dictionary<string, HeaderData>();

    // HeaderData[]? FilteredSearchHeaderResults => _searchInputValue != null ? _headerDataList?.Where(i => i.HeaderName.ToLower().Contains(_searchInputValue?.ToLower())).ToArray() : null;

    protected override async Task OnInitializedAsync()
    {
        await LoadBasicLocalDataAsync();
        
        await LoadAllHeadersAsync();
        
        await SaveBasicLocalDataAsync();
    }

    private async Task<HeaderIdentifier[]?> FilterResultsBySearch(string? input)
    {
        if (input == null || _headerDataListRaw == null || _headerDataListRaw.Count < 1)
            return null;

        List<HeaderIdentifier> filteredIdentifiersReturnList = new List<HeaderIdentifier>();
        
        List<string> filteredMatchingHeaderDatas = new List<string>();
        List<string> filteredMatchingStructDatas = new List<string>();
        List<string> filteredMatchingFunctionDatas = new List<string>();

        bool flagFoundStructMatch = false;
        bool flagFoundFunctionMatch = false;

        foreach (HeaderData headerData in _headerDataListRaw)
        {
            if (headerData.StructsList == null || headerData.StructsList.Count < 1)
                continue;
            
            foreach (HeaderStructData structData in headerData.StructsList)
            {
                if (structData.FunctionsList == null || structData.FunctionsList.Count < 1)
                    continue;
                
                
                foreach (HeaderFunctionData functionData in structData.FunctionsList)
                {
                    
                    if (functionData.FunctionName.Contains(input))
                    {
                        filteredMatchingFunctionDatas.Add(functionData.FunctionName);
                        flagFoundFunctionMatch = true;
                    }
                }

                if (!flagFoundFunctionMatch)
                {
                    if (structData.StructName.ToLower().Contains(input))
                    {
                        filteredMatchingStructDatas.Add(structData.StructName);
                        flagFoundStructMatch = true;
                    }
                }
                flagFoundFunctionMatch = false;

            }
            
            

            if (!flagFoundStructMatch)
            {
                if (headerData.HeaderName.ToLower().Contains(input))
                {
                    filteredMatchingHeaderDatas.Add(headerData.HeaderName);
                }
            }
            flagFoundStructMatch = false;
            
        }

        foreach (string headerName in filteredMatchingHeaderDatas)
        {
            filteredIdentifiersReturnList.Add();
        }
        
        
        
        HeaderData[]? headerDatasFiltered = _headerDataListRaw?.Where(i => i.HeaderName.ToLower().Contains(_searchInputValue?.ToLower())).ToArray();
        List<HeaderStructData> headerStructDatasFiltered = new List<HeaderStructData>();
        foreach (HeaderData headerData in _headerDataList)
        {
            headerStructDatasFiltered.Add(headerData.StructsList.Where(i => i.StructName.ToLower().Contains(input)));
        }
    }


    private async Task SaveBasicLocalDataAsync()
    {
        await LocalStorage.SetItemAsync(ReferenceData.SaveKey_LastHeadersCachedDateTime, _lastHeadersCachedTime);
    }

    private async Task LoadBasicLocalDataAsync()
    {
        _lastHeadersCachedTime = await LocalStorage.GetItemAsync<DateTime?>(ReferenceData.SaveKey_LastHeadersCachedDateTime);
    }

    private async Task ClearLocalHeaderCacheAsync(string headerName)
    {
        await LocalStorage.RemoveItemAsync(ReferenceData.SaveKey_HeaderDataPrefix + headerName);
    }

    private async Task ClearAllLocalCacheAsync()
    {
        _lastHeadersCachedTime = null;
        
        IEnumerable<string> existingLocalKeys = await LocalStorage.KeysAsync();
        foreach (string existingKey in existingLocalKeys)
        {
            if (existingKey.StartsWith(ReferenceData.SaveKey_HeaderDataPrefix))
                await LocalStorage.RemoveItemAsync(existingKey);
        }

        await SaveBasicLocalDataAsync();
    }

    private async Task LoadAllHeadersAsync()
    {
        // Sanity check that we realistically should try to load headers right now.
        // If LastStartedLoadingHeadersTime does have a value, then we are still trying to load the headers right now.
        // A timeout is checked for with variable `loadingHeadersTimeoutSeconds` in an attempt to prevent edge cases and failures from allowing a retry.
        if (_lastStartedLoadingHeadersTime.HasValue && (DateTime.UtcNow - _lastStartedLoadingHeadersTime.Value).TotalSeconds < LoadingHeadersTimeoutSeconds)
            return;

        // Record the current DateTime into a variable so we know how long it takes to complete the header loading
        _lastStartedLoadingHeadersTime = DateTime.UtcNow;
        
        _headerDataList?.Clear();

        List<string> headersNamesListBuffer;
        lock (ReferenceData.ArkHeaderNamesList)
        {
            headersNamesListBuffer = new List<string>(ReferenceData.ArkHeaderNamesList);
        }

        bool updatedLocalCache = false;
        List<Task> loaderTasksList = new List<Task>();
        foreach (string headerName in headersNamesListBuffer)
        {
            if (_lastHeadersCachedTime.HasValue)
            {
                if ((DateTime.UtcNow - _lastHeadersCachedTime.Value).TotalDays < 3f)
                {
                     // Less than maximum cache reset time has passed since last cache save.
                    // Attempt to load from storage locally
                    HeaderData? localCachedHeader = await LocalStorage.GetItemAsync<HeaderData>(ReferenceData.SaveKey_HeaderDataPrefix + headerName);
                    if (localCachedHeader == null)
                    {
                        // await ClearLocalHeaderCacheAsync(headerName);
                        await ClearAllLocalCacheAsync();
                    }
                    else
                    {
                        _headerDataList.Add(localCachedHeader);
                        continue;
                    }
                }
                else
                {
                    // Headers exist but are too old. Clear them from local.
                    await ClearAllLocalCacheAsync();
                }
            }
            
            
            loaderTasksList.Add( LoadHeaderAsync(headerName));
            updatedLocalCache = true;
        }
        await Task.WhenAll(loaderTasksList);

        // Save the created HeaderData to local headers cache
        foreach (HeaderData headerData in _headerDataList)
        {
            await LocalStorage.SetItemAsync(ReferenceData.SaveKey_HeaderDataPrefix + headerData.HeaderName, headerData);
        }

        if (updatedLocalCache)
        {
            _lastHeadersCachedTime = DateTime.UtcNow;
            await SaveBasicLocalDataAsync();
        }
        
        _lastLoadCompletionDurationSeconds = (float)(DateTime.UtcNow - _lastStartedLoadingHeadersTime.Value).TotalSeconds;
    }

    private async Task LoadHeaderAsync(string headerName)
    {
        if (_headerDataList == null)
            return;
        
        // Download fresh header data and store in local header cache
        using HttpClient webClient = new HttpClient();
        string requestUrl = ReferenceData.RawGitHubAsaApiRepoUrl + ReferenceData.GitHubAsaApiHeadersFilePath + $"/{headerName}.h";
        string rawData = await webClient.GetStringAsync(requestUrl);

        if (rawData.Length < 5)
            return;
        
        MatchCollection matchList = Regex.Matches(rawData, StructFullContentsRegexPattern, RegexOptions.Multiline | RegexOptions.Singleline);
        List<string> structMatchesList = matchList.Select(match => match.Value).ToList();

        HeaderData headerData = new HeaderData()
        {
            HeaderName = headerName,
            StructsList = new List<HeaderStructData>(),
        };
        _headerDataList.Add(headerData);
        
        for(int i = 0; i < structMatchesList.Count; i++)
        {
            string? structName = Regex.Match(structMatchesList[i], StructNameRegexPattern, RegexOptions.Multiline | RegexOptions.Singleline).Value;
            
            matchList = Regex.Matches(structMatchesList[i], StructFunctionsFullContentRegexPattern, RegexOptions.Multiline | RegexOptions.Singleline);
            string? structFunctionsSectionSnippet = matchList.FirstOrDefault()?.Value;
            
            if(string.IsNullOrEmpty(structFunctionsSectionSnippet) || string.IsNullOrEmpty(structName))
                continue;

            HeaderStructData structData = new HeaderStructData()
            {
                StructName = structName,
                FunctionsList = new List<HeaderFunctionData>()
            };
            headerData.StructsList.Add(structData);

            matchList = Regex.Matches(structFunctionsSectionSnippet, FunctionLinesRegexPattern);
            List<string> functionLinesList = matchList.Select(match => match.Value.Trim('\t')).ToList();

            foreach (string functionLine in functionLinesList)
            {
                if (functionLine.Length < 5)
                    continue;

                HeaderFunctionData functionData = new HeaderFunctionData()
                {
                    FunctionName = Regex.Match(functionLine, FunctionLineNameRegexPattern).Value,
                    RawFunctionSignature = functionLine,
                };
                structData.FunctionsList.Add(functionData);
            }

        }
    }
    

}